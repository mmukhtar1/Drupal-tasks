<?php

/**
 * @file
 * Provides a custom entity types entity type.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function custom_entity_types_theme(): array {
  return [
    'custom_entity_types' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for custom entity types templates.
 *
 * Default template: custom-entity-types.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the custom entity types
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_custom_entity_types(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function custom_entity_types_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block':
    case 'user_cancel_block_unpublish':
      // Unpublish custom entity types.
      $storage = \Drupal::entityTypeManager()->getStorage('custom_entity_types');
      $custom_entity_types_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(TRUE)
        ->execute();
      // Process batch by batch.
      $batch = [
        'title' => t('Unpublishing Node...'),
        'operations' => [
          [
            '\Drupal\custom_entity_types\BatchOperations::unPublishNode',
            [$custom_entity_types_ids],
          ],
        ],
        'finished' => '\Drupal\custom_entity_types\BatchOperations::unPublishNodeFinishedCallback',
      ];
      batch_set($batch);
      break;

    case 'user_cancel_reassign':
      // Anonymize custom entity types.
      $storage = \Drupal::entityTypeManager()->getStorage('custom_entity_types');
      $custom_entity_types_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(TRUE)
        ->execute();

      // Process batch by batch.
      $batch = [
        'title' => t('Anonymising Node...'),
        'operations' => [
          [
            '\Drupal\custom_entity_types\BatchOperations::anonymizeNode',
            [$custom_entity_types_ids],
          ],
        ],
        'finished' => '\Drupal\custom_entity_types\BatchOperations::anonymizeNodeFinishedCallback',
      ];
      batch_set($batch);
      break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function custom_entity_types_entity_delete(EntityInterface $entity) {

  if ($entity->getEntityTypeId() === 'user') {
    $uid = $entity->id();
    $storage = \Drupal::entityTypeManager()->getStorage('custom_entity_types');
    $custom_entity_types_ids = $storage->getQuery()
      ->condition('uid', $uid)
      ->accessCheck(TRUE)
      ->execute();

    // Process batch by batch.
    $batch = [
      'title' => t('Deleting Node...'),
      'operations' => [
        [
          '\Drupal\custom_entity_types\BatchOperations::deleteNode',
          [$custom_entity_types_ids],
        ],
      ],
    ];
    batch_set($batch);
  }
}

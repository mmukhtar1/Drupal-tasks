<?php

/**
 * @file
 * Contains advanced_view.module.
 */

declare(strict_types=1);

use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\Core\Cache\CacheBackendInterface;

/**
 * @file
 * Primary module hooks for Advanced view module.
 */

/**
 * Get the published/ unpublished article count.
 *
 * @return int
 *   Returns the pubished/ unpublished count
 */
function advanced_view_get_article_count($type, $status) {
  if (\Drupal::cache()->get('article_count_' . $status)) {
    $count = \Drupal::cache()->get('article_count_' . $status);
    $data = $count->data;
    return $data;
  }
  else {
    $query_articles = \Drupal::entityQuery('node')
      ->condition('status', $status)
      ->condition('type', $type);
    $query_articles->accessCheck(TRUE);
    $count = $query_articles->count()->execute();
    $cache_tags = ['node_list:article'];
    // Caching given as 3600 (1 hour)
    // CacheBackendInterface::CACHE_PERMANENT for permananent caching.
    \Drupal::cache()->set('article_count_' . $status, $count, 3600, $cache_tags);
    return $count;
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function advanced_view_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view->id() == 'views_aggregation_advanced' && $view->current_display == 'page_1') {
    $variables['published_count'] = advanced_view_get_article_count('article', 1);
    $variables['unpublished_count'] = advanced_view_get_article_count('article', 0);
  }
}

/**
 * Implements hook_node_presave().
 *
 * Invalidate Node published or unpublished tag to invalidate the cache.
 */
// function advanced_view_node_presave(NodeInterface $node) {
//   if (!$node->isNew() && $node->getType() == 'article') {
//     Cache::invalidateTags(['invalidate_article_publish_upublish']);
//   }

// }

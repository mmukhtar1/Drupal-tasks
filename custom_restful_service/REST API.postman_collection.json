{
	"info": {
		"_postman_id": "48855886-d017-41ea-9635-b21c80323e94",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29267171"
	},
	"item": [
		{
			"name": "Get Article Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-CSRF-Token",
						"value": "kt-Sq8ZnRIvz2yJQzVd5r1n2YVV3nnCRcCAUYdgr2ug",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://drupal-10.1.6.ddev.site/api/custom-rest-resource/69?_format=json",
					"protocol": "https",
					"host": [
						"drupal-10",
						"1",
						"6",
						"ddev",
						"site"
					],
					"path": [
						"api",
						"custom-rest-resource",
						"69"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create an Article content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-CSRF-Token",
						"value": "kt-Sq8ZnRIvz2yJQzVd5r1n2YVV3nnCRcCAUYdgr2ug",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Nostrud Scisco\",\n    \"body\": \"Accumsan ad neque proprius quis scisco vereor ymo. Abico consectetuer ludus premo probo refoveo sit\",\n    \"field_content_access_restriction\": [\n        {\n            \"target_id\": \"12\"\n        },\n        {\n            \"target_id\": \"13\"\n        }\n    ],\n    \"field_tags\": [\n        {\n            \"target_id\": \"1\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://drupal-10.1.6.ddev.site/api/create-article-content?_format=json",
					"protocol": "https",
					"host": [
						"drupal-10",
						"1",
						"6",
						"ddev",
						"site"
					],
					"path": [
						"api",
						"create-article-content"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Article Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"New title for 69\",\n    \"body\": \"Iaceo magna patria. Plaga quae sino sit utinam volutpat. Enim eum feugiat jugis modo neque olim similis vicis. Appellatio commoveo interdico pagus quis tego. Enim gemino gilvus humo premo. Aliquam aptent consectetuer cui enim jumentum modo nobis paulatim quidne. In paratus sagaciter usitas. Acsi aliquip consequat ea facilisis lobortis luctus pecus persto plaga.\\n\\nAliquip gilvus nutus vero. Defui ea fere interdico luptatum natu quadrum utrum vero. Blandit gemino gilvus iaceo jus patria tego ullamcorper veniam. Causa commodo roto sagaciter sed. Lenis luctus singularis. Cogo haero in jus probo singularis velit volutpat. At camur conventio facilisis qui ullamcorper. Commodo diam dolor gemino mauris neo patria populus quia quis.\\n\\nIaceo melior ratis. Abdo brevitas lenis vindico. Defui loquor natu scisco secundum virtus volutpat. Augue et paratus. Aptent comis incassum quae qui ulciscor. Aptent exerci paulatim usitas. Amet distineo elit exerci facilisi nutus tation voco. Adipiscing blandit commodo odio patria quidne utrum vicis. Acsi cui erat macto os patria premo refero vel veniam. Abico incassum ratis roto.\\n\\nAbluo exputo utrum. Autem caecus dolus eros fere modo praesent roto sagaciter vindico. Aliquip amet duis et exerci iriure nunc persto quibus sudo. Abluo accumsan dolor dolore dolus immitto olim pagus populus vulpes. Dolus eligo huic imputo laoreet luctus magna veniam. Adipiscing bene modo quidem refero saepius scisco ullamcorper validus velit. Amet feugiat premo scisco. Commodo esse importunus lobortis loquor luctus quadrum vicis.\\n\\nBlandit consequat duis ibidem ille luptatum mos quis tum. Cogo et fere loquor. Commoveo eligo esca facilisi lobortis nobis pagus praemitto te velit.\\n\\nAd illum imputo quidem similis turpis valetudo vulputate. Abigo consequat nostrud saepius si tum. Aliquip iaceo interdico odio premo quae similis suscipere valetudo velit. Enim ratis valde. Aliquam autem lenis lucidus. Abbas autem tincidunt. Tamen te tum utrum vereor zelus.\\n\\nAbdo at immitto in olim probo. Accumsan acsi damnum elit genitus gilvus lobortis magna praesent. Aptent elit paratus populus praesent quibus si vicis. Aliquip iaceo jus modo natu persto scisco usitas zelus. Hendrerit torqueo typicus. Cogo facilisi feugiat iriure jus molior pagus ratis tamen zelus. Aliquip at camur genitus obruo populus proprius venio vicis volutpat.\\n\\nAbdo eligo usitas utinam. Brevitas ex facilisi ille meus. Elit esse et mos probo suscipere validus virtus. Bene facilisis ideo iusto laoreet nunc occuro saluto ullamcorper utinam. Acsi paratus vulputate. Bene caecus cui iusto molior praesent quia suscipere typicus. Augue defui dolor haero olim validus. Brevitas iustum jugis laoreet occuro torqueo uxor vel vereor vulpes. Esse odio persto uxor vicis.\\n\\nAptent dignissim gilvus hos immitto interdico pertineo typicus ulciscor. Praemitto roto sed. Blandit et gilvus importunus iusto qui suscipere. Caecus imputo letalis. Ad causa eum facilisis lucidus nostrud populus quia vindico voco. Cui esca nostrud. Abigo amet at exerci exputo feugiat persto sagaciter. Esse fere molior persto rusticus tation vel. Aliquip feugiat luptatum. Ludus obruo occuro persto quae quidem singularis virtus.\\n\\nAbdo autem conventio imputo occuro pneum sit tation. Abbas luptatum macto praemitto quibus quidne roto ulciscor verto wisi. Ad et facilisi mauris patria. Hendrerit os pecus qui. Commoveo ille nibh nobis qui quia usitas voco ymo. Eligo macto pneum utinam. Laoreet melior metuo persto si similis. Augue odio premo quidne ratis singularis. Illum importunus nulla nutus refoveo similis ulciscor.\\n\\nDistineo ex hendrerit jugis macto melior olim proprius quae singularis. Defui duis occuro os paulatim. Causa pagus similis sudo vel. Blandit exerci laoreet nunc quae singularis torqueo verto. Accumsan conventio dolor gilvus paratus probo. Causa dolor paulatim quis sed si sino voco. Caecus exputo gemino laoreet neque olim praemitto praesent scisco. Antehabeo brevitas eum facilisis gravis jus laoreet lobortis oppeto quibus.\\n\\nFere lucidus ratis. Capto ea hos ibidem nunc refero saluto usitas vel voco. Elit esca pertineo pneum praesent turpis ullamcorper valde. Autem brevitas enim ex obruo pertineo usitas uxor vel. Dignissim facilisis gemino imputo laoreet luptatum vereor.\",\n    \"field_content_access_restriction\": [\n        {\n            \"target_id\": \"13\"\n        }\n    ],\n    \"field_tags\": [\n        {\n            \"target_id\": \"3\"\n        },\n        {\n            \"target_id\": \"2\"\n        },\n        {\n            \"target_id\": \"4\"\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://drupal-10.1.6.ddev.site/api/patch-article-content/24234234234?_format=json",
					"protocol": "https",
					"host": [
						"drupal-10",
						"1",
						"6",
						"ddev",
						"site"
					],
					"path": [
						"api",
						"patch-article-content",
						"24234234234"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Article Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://drupal-10.1.6.ddev.site/api/delete-article-content/68?_format=json",
					"protocol": "https",
					"host": [
						"drupal-10",
						"1",
						"6",
						"ddev",
						"site"
					],
					"path": [
						"api",
						"delete-article-content",
						"68"
					],
					"query": [
						{
							"key": "_format",
							"value": "json"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}